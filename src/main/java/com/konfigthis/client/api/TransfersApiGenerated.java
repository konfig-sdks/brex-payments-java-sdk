/*
 * Payments API
 *  The payments API allows you to initiate and manage payments and vendors from your Brex business accounts. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ApprovalType;
import com.konfigthis.client.model.CreateIncomingTransferRequest;
import com.konfigthis.client.model.CreateTransferRequest;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PageTransfer;
import com.konfigthis.client.model.Transfer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TransfersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransfersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TransfersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createIncomingTransferCall(String idempotencyKey, CreateIncomingTransferRequest createIncomingTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createIncomingTransferRequest;

        // create path and map variables
        String localVarPath = "/v1/incoming_transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIncomingTransferValidateBeforeCall(String idempotencyKey, CreateIncomingTransferRequest createIncomingTransferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createIncomingTransfer(Async)");
        }

        // verify the required parameter 'createIncomingTransferRequest' is set
        if (createIncomingTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'createIncomingTransferRequest' when calling createIncomingTransfer(Async)");
        }

        return createIncomingTransferCall(idempotencyKey, createIncomingTransferRequest, _callback);

    }


    private ApiResponse<Transfer> createIncomingTransferWithHttpInfo(String idempotencyKey, CreateIncomingTransferRequest createIncomingTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = createIncomingTransferValidateBeforeCall(idempotencyKey, createIncomingTransferRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createIncomingTransferAsync(String idempotencyKey, CreateIncomingTransferRequest createIncomingTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIncomingTransferValidateBeforeCall(idempotencyKey, createIncomingTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateIncomingTransferRequestBuilder {
        private final String description;
        private final Object counterparty;
        private final Object receivingAccount;
        private final Money amount;
        private final String idempotencyKey;

        private CreateIncomingTransferRequestBuilder(String description, Object counterparty, Object receivingAccount, Money amount, String idempotencyKey) {
            this.description = description;
            this.counterparty = counterparty;
            this.receivingAccount = receivingAccount;
            this.amount = amount;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Build call for createIncomingTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createIncomingTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateIncomingTransferRequest createIncomingTransferRequest = buildBodyParams();
            return createIncomingTransferCall(idempotencyKey, createIncomingTransferRequest, _callback);
        }

        private CreateIncomingTransferRequest buildBodyParams() {
            CreateIncomingTransferRequest createIncomingTransferRequest = new CreateIncomingTransferRequest();
            createIncomingTransferRequest.description(this.description);
            createIncomingTransferRequest.counterparty(this.counterparty);
            createIncomingTransferRequest.receivingAccount(this.receivingAccount);
            createIncomingTransferRequest.amount(this.amount);
            return createIncomingTransferRequest;
        }

        /**
         * Execute createIncomingTransfer request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createIncomingTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            CreateIncomingTransferRequest createIncomingTransferRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = createIncomingTransferWithHttpInfo(idempotencyKey, createIncomingTransferRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createIncomingTransfer request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createIncomingTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            CreateIncomingTransferRequest createIncomingTransferRequest = buildBodyParams();
            return createIncomingTransferWithHttpInfo(idempotencyKey, createIncomingTransferRequest);
        }

        /**
         * Execute createIncomingTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createIncomingTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            CreateIncomingTransferRequest createIncomingTransferRequest = buildBodyParams();
            return createIncomingTransferAsync(idempotencyKey, createIncomingTransferRequest, _callback);
        }
    }

    /**
     *  Create incoming transfer 
     *  This endpoint creates a new incoming transfer. You may use use any eligible bank account connection to fund (ACH Debit)  any active Brex business account.  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex&#39;s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the &lt;a href&#x3D;\&quot;https://www.brex.com/legal/developer-portal/\&quot;&gt;Brex Access Agreement&lt;/a&gt; and contact us if  you have any questions. 
     * @param idempotencyKey  (required)
     * @param createIncomingTransferRequest  (required)
     * @return CreateIncomingTransferRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createIncomingTransfer 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CreateIncomingTransferRequestBuilder createIncomingTransfer(String description, Object counterparty, Object receivingAccount, Money amount, String idempotencyKey) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        
        
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateIncomingTransferRequestBuilder(description, counterparty, receivingAccount, amount, idempotencyKey);
    }
    private okhttp3.Call createTransferCall(String idempotencyKey, CreateTransferRequest createTransferRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTransferRequest;

        // create path and map variables
        String localVarPath = "/v1/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransferValidateBeforeCall(String idempotencyKey, CreateTransferRequest createTransferRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createTransfer(Async)");
        }

        // verify the required parameter 'createTransferRequest' is set
        if (createTransferRequest == null) {
            throw new ApiException("Missing the required parameter 'createTransferRequest' when calling createTransfer(Async)");
        }

        return createTransferCall(idempotencyKey, createTransferRequest, _callback);

    }


    private ApiResponse<Transfer> createTransferWithHttpInfo(String idempotencyKey, CreateTransferRequest createTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = createTransferValidateBeforeCall(idempotencyKey, createTransferRequest, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransferAsync(String idempotencyKey, CreateTransferRequest createTransferRequest, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransferValidateBeforeCall(idempotencyKey, createTransferRequest, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTransferRequestBuilder {
        private final String description;
        private final Object counterparty;
        private final Money amount;
        private final String externalMemo;
        private final Object originatingAccount;
        private final String idempotencyKey;
        private ApprovalType approvalType;

        private CreateTransferRequestBuilder(String description, Object counterparty, Money amount, String externalMemo, Object originatingAccount, String idempotencyKey) {
            this.description = description;
            this.counterparty = counterparty;
            this.amount = amount;
            this.externalMemo = externalMemo;
            this.originatingAccount = originatingAccount;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set approvalType
         * @param approvalType  (optional)
         * @return CreateTransferRequestBuilder
         */
        public CreateTransferRequestBuilder approvalType(ApprovalType approvalType) {
            this.approvalType = approvalType;
            return this;
        }
        
        /**
         * Build call for createTransfer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTransferRequest createTransferRequest = buildBodyParams();
            return createTransferCall(idempotencyKey, createTransferRequest, _callback);
        }

        private CreateTransferRequest buildBodyParams() {
            CreateTransferRequest createTransferRequest = new CreateTransferRequest();
            createTransferRequest.description(this.description);
            createTransferRequest.counterparty(this.counterparty);
            createTransferRequest.amount(this.amount);
            createTransferRequest.externalMemo(this.externalMemo);
            createTransferRequest.originatingAccount(this.originatingAccount);
            createTransferRequest.approvalType(this.approvalType);
            return createTransferRequest;
        }

        /**
         * Execute createTransfer request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            CreateTransferRequest createTransferRequest = buildBodyParams();
            ApiResponse<Transfer> localVarResp = createTransferWithHttpInfo(idempotencyKey, createTransferRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTransfer request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            CreateTransferRequest createTransferRequest = buildBodyParams();
            return createTransferWithHttpInfo(idempotencyKey, createTransferRequest);
        }

        /**
         * Execute createTransfer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createTransfer 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            CreateTransferRequest createTransferRequest = buildBodyParams();
            return createTransferAsync(idempotencyKey, createTransferRequest, _callback);
        }
    }

    /**
     *  Create transfer 
     *  This endpoint creates a new transfer.  Currently, the API can only create transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRES (For vendors already created through dashboard. Rate limited to 100/day - Please reach out to developer-support@brex.com if you need to do more)  **Transaction Descriptions** * For outgoing check payments, a successful transfer will return a response containing a description value with a format of &#x60;Check #&lt;check number&gt; to &lt;recipient_name&gt; - &lt;external_memo&gt;&#x60;. * For book transfers (from one Brex Business account to another), the recipient value will have a format of &#x60;&lt;customer_account.dba_name&gt; - &lt;external_memo&gt;&#x60; and the sender will have a format of &#x60;&lt;target customer account&#39;s dba name&gt; - &lt;external_memo&gt;&#x60;. * For other payment rails, the format will be &#x60;&lt;counterparty_name&gt; - &lt;external_memo&gt;&#x60;, where Counterparty name is &#x60;payment_instrument.beneficiary_name&#x60; or &#x60;contact.name&#x60; For vendors created from the Payments API, the &#x60;counterparty_name&#x60; will be the &#x60;company_name&#x60; [field](https://developer.brex.com/openapi/payments_api/).  **Reminder**: You may not use the Brex API for any activity that requires a license or registration from any  governmental authority without Brex&#39;s prior review and approval. This includes but is not limited to any money services business or money transmission activity.  Please review the &lt;a href&#x3D;\&quot;https://www.brex.com/legal/developer-portal/\&quot;&gt;Brex Access Agreement&lt;/a&gt; and contact us if  you have any questions. 
     * @param idempotencyKey  (required)
     * @param createTransferRequest  (required)
     * @return CreateTransferRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createTransfer 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CreateTransferRequestBuilder createTransfer(String description, Object counterparty, Money amount, String externalMemo, Object originatingAccount, String idempotencyKey) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (externalMemo == null) throw new IllegalArgumentException("\"externalMemo\" is required but got null");
            

        if (originatingAccount == null) throw new IllegalArgumentException("\"originatingAccount\" is required but got null");
        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateTransferRequestBuilder(description, counterparty, amount, externalMemo, originatingAccount, idempotencyKey);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transfers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<Transfer> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<Transfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Transfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getTransfersById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return Transfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getTransfersById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public Transfer execute() throws ApiException {
            ApiResponse<Transfer> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Transfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getTransfersById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Transfer> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getTransfersById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Transfer> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     *  Get transfer 
     *  This endpoint gets a transfer by ID.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTransfersById 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/transfers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String cursor, Integer limit, final ApiCallback _callback) throws ApiException {
        return listCall(cursor, limit, _callback);

    }


    private ApiResponse<PageTransfer> listWithHttpInfo(String cursor, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, null);
        Type localVarReturnType = new TypeToken<PageTransfer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String cursor, Integer limit, final ApiCallback<PageTransfer> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, _callback);
        Type localVarReturnType = new TypeToken<PageTransfer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String cursor;
        private Integer limit;

        private ListRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listTransfers 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(cursor, limit, _callback);
        }


        /**
         * Execute list request
         * @return PageTransfer
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listTransfers 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public PageTransfer execute() throws ApiException {
            ApiResponse<PageTransfer> localVarResp = listWithHttpInfo(cursor, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PageTransfer&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listTransfers 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageTransfer> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(cursor, limit);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listTransfers 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageTransfer> _callback) throws ApiException {
            return listAsync(cursor, limit, _callback);
        }
    }

    /**
     *  Lists transfers  
     *  This endpoint lists existing transfers for an account.  Currently, the API can only return transfers for the following payment rails: - ACH - DOMESTIC_WIRE - CHEQUE - INTERNATIONAL_WIRE 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTransfers 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
}
