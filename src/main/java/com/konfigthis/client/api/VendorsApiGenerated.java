/*
 * Payments API
 *  The payments API allows you to initiate and manage payments and vendors from your Brex business accounts. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateVendorRequest;
import com.konfigthis.client.model.PageVendorResponse;
import com.konfigthis.client.model.PaymentAccountRequest;
import com.konfigthis.client.model.UpdateVendorRequest;
import com.konfigthis.client.model.VendorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class VendorsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VendorsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public VendorsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewVendorCall(String idempotencyKey, CreateVendorRequest createVendorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVendorRequest;

        // create path and map variables
        String localVarPath = "/v1/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewVendorValidateBeforeCall(String idempotencyKey, CreateVendorRequest createVendorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'idempotencyKey' is set
        if (idempotencyKey == null) {
            throw new ApiException("Missing the required parameter 'idempotencyKey' when calling createNewVendor(Async)");
        }

        // verify the required parameter 'createVendorRequest' is set
        if (createVendorRequest == null) {
            throw new ApiException("Missing the required parameter 'createVendorRequest' when calling createNewVendor(Async)");
        }

        return createNewVendorCall(idempotencyKey, createVendorRequest, _callback);

    }


    private ApiResponse<VendorResponse> createNewVendorWithHttpInfo(String idempotencyKey, CreateVendorRequest createVendorRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewVendorValidateBeforeCall(idempotencyKey, createVendorRequest, null);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewVendorAsync(String idempotencyKey, CreateVendorRequest createVendorRequest, final ApiCallback<VendorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewVendorValidateBeforeCall(idempotencyKey, createVendorRequest, _callback);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewVendorRequestBuilder {
        private final String companyName;
        private final String idempotencyKey;
        private String email;
        private String phone;
        private List<PaymentAccountRequest> paymentAccounts;

        private CreateNewVendorRequestBuilder(String companyName, String idempotencyKey) {
            this.companyName = companyName;
            this.idempotencyKey = idempotencyKey;
        }

        /**
         * Set email
         * @param email Email for vendor. (optional)
         * @return CreateNewVendorRequestBuilder
         */
        public CreateNewVendorRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number for vendor. (optional)
         * @return CreateNewVendorRequestBuilder
         */
        public CreateNewVendorRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set paymentAccounts
         * @param paymentAccounts Payment accounts associated with the vendor. (optional)
         * @return CreateNewVendorRequestBuilder
         */
        public CreateNewVendorRequestBuilder paymentAccounts(List<PaymentAccountRequest> paymentAccounts) {
            this.paymentAccounts = paymentAccounts;
            return this;
        }
        
        /**
         * Build call for createNewVendor
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateVendorRequest createVendorRequest = buildBodyParams();
            return createNewVendorCall(idempotencyKey, createVendorRequest, _callback);
        }

        private CreateVendorRequest buildBodyParams() {
            CreateVendorRequest createVendorRequest = new CreateVendorRequest();
            createVendorRequest.companyName(this.companyName);
            createVendorRequest.email(this.email);
            createVendorRequest.phone(this.phone);
            createVendorRequest.paymentAccounts(this.paymentAccounts);
            return createVendorRequest;
        }

        /**
         * Execute createNewVendor request
         * @return VendorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public VendorResponse execute() throws ApiException {
            CreateVendorRequest createVendorRequest = buildBodyParams();
            ApiResponse<VendorResponse> localVarResp = createNewVendorWithHttpInfo(idempotencyKey, createVendorRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewVendor request with HTTP info returned
         * @return ApiResponse&lt;VendorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorResponse> executeWithHttpInfo() throws ApiException {
            CreateVendorRequest createVendorRequest = buildBodyParams();
            return createNewVendorWithHttpInfo(idempotencyKey, createVendorRequest);
        }

        /**
         * Execute createNewVendor request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> createVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorResponse> _callback) throws ApiException {
            CreateVendorRequest createVendorRequest = buildBodyParams();
            return createNewVendorAsync(idempotencyKey, createVendorRequest, _callback);
        }
    }

    /**
     *  Create vendor 
     *  This endpoint creates a new vendor. 
     * @param idempotencyKey  (required)
     * @param createVendorRequest  (required)
     * @return CreateNewVendorRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createVendor 200 response </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewVendorRequestBuilder createNewVendor(String companyName, String idempotencyKey) throws IllegalArgumentException {
        if (companyName == null) throw new IllegalArgumentException("\"companyName\" is required but got null");
            

        if (idempotencyKey == null) throw new IllegalArgumentException("\"idempotencyKey\" is required but got null");
            

        return new CreateNewVendorRequestBuilder(companyName, idempotencyKey);
    }
    private okhttp3.Call deleteVendorByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVendorByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVendorById(Async)");
        }

        return deleteVendorByIdCall(id, _callback);

    }


    private ApiResponse<Void> deleteVendorByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteVendorByIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteVendorByIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVendorByIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteVendorByIdRequestBuilder {
        private final String id;

        private DeleteVendorByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for deleteVendorById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteVendorByIdCall(id, _callback);
        }


        /**
         * Execute deleteVendorById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteVendorByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteVendorById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteVendorByIdWithHttpInfo(id);
        }

        /**
         * Execute deleteVendorById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> deleteVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteVendorByIdAsync(id, _callback);
        }
    }

    /**
     *  Delete vendor. 
     *  This endpoint deletes a vendor by ID. 
     * @param id  (required)
     * @return DeleteVendorByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteVendor 200 response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteVendorByIdRequestBuilder deleteVendorById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DeleteVendorByIdRequestBuilder(id);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<VendorResponse> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<VendorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getVendorById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return VendorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getVendorById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public VendorResponse execute() throws ApiException {
            ApiResponse<VendorResponse> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;VendorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getVendorById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> getVendorById 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorResponse> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     *  Get vendor 
     *  This endpoint gets a vendor by ID. 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getVendorById 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call listCall(String cursor, Integer limit, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/vendors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String cursor, Integer limit, String name, final ApiCallback _callback) throws ApiException {
        return listCall(cursor, limit, name, _callback);

    }


    private ApiResponse<PageVendorResponse> listWithHttpInfo(String cursor, Integer limit, String name) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, name, null);
        Type localVarReturnType = new TypeToken<PageVendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String cursor, Integer limit, String name, final ApiCallback<PageVendorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(cursor, limit, name, _callback);
        Type localVarReturnType = new TypeToken<PageVendorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String cursor;
        private Integer limit;
        private String name;

        private ListRequestBuilder() {
        }

        /**
         * Set cursor
         * @param cursor  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder cursor(String cursor) {
            this.cursor = cursor;
            return this;
        }
        
        /**
         * Set limit
         * @param limit  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set name
         * @param name  (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listVendors 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(cursor, limit, name, _callback);
        }


        /**
         * Execute list request
         * @return PageVendorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listVendors 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public PageVendorResponse execute() throws ApiException {
            ApiResponse<PageVendorResponse> localVarResp = listWithHttpInfo(cursor, limit, name);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;PageVendorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listVendors 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageVendorResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(cursor, limit, name);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> listVendors 200 response </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageVendorResponse> _callback) throws ApiException {
            return listAsync(cursor, limit, name, _callback);
        }
    }

    /**
     *  Lists vendors  
     *  This endpoint lists all existing vendors for an account. Takes an optional parameter to match by vendor name. 
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listVendors 200 response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call updateByIdCall(String id, UpdateVendorRequest updateVendorRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVendorRequest;

        // create path and map variables
        String localVarPath = "/v1/vendors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("Idempotency-Key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateByIdValidateBeforeCall(String id, UpdateVendorRequest updateVendorRequest, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateById(Async)");
        }

        // verify the required parameter 'updateVendorRequest' is set
        if (updateVendorRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVendorRequest' when calling updateById(Async)");
        }

        return updateByIdCall(id, updateVendorRequest, idempotencyKey, _callback);

    }


    private ApiResponse<VendorResponse> updateByIdWithHttpInfo(String id, UpdateVendorRequest updateVendorRequest, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateVendorRequest, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateByIdAsync(String id, UpdateVendorRequest updateVendorRequest, String idempotencyKey, final ApiCallback<VendorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateByIdValidateBeforeCall(id, updateVendorRequest, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<VendorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateByIdRequestBuilder {
        private final String id;
        private String companyName;
        private String email;
        private String phone;
        private List<PaymentAccountRequest> paymentAccounts;
        private String beneficiaryName;
        private String idempotencyKey;

        private UpdateByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set companyName
         * @param companyName Name for vendor (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder companyName(String companyName) {
            this.companyName = companyName;
            return this;
        }
        
        /**
         * Set email
         * @param email Email for vendor (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Set phone
         * @param phone Phone number for vendor (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder phone(String phone) {
            this.phone = phone;
            return this;
        }
        
        /**
         * Set paymentAccounts
         * @param paymentAccounts To update payment instruments, we require the entire payload for each payment instrument that is being updated.  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder paymentAccounts(List<PaymentAccountRequest> paymentAccounts) {
            this.paymentAccounts = paymentAccounts;
            return this;
        }
        
        /**
         * Set beneficiaryName
         * @param beneficiaryName Name for the Beneficiary (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder beneficiaryName(String beneficiaryName) {
            this.beneficiaryName = beneficiaryName;
            return this;
        }
        
        /**
         * Set idempotencyKey
         * @param idempotencyKey  (optional)
         * @return UpdateByIdRequestBuilder
         */
        public UpdateByIdRequestBuilder idempotencyKey(String idempotencyKey) {
            this.idempotencyKey = idempotencyKey;
            return this;
        }
        
        /**
         * Build call for updateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateVendorRequest updateVendorRequest = buildBodyParams();
            return updateByIdCall(id, updateVendorRequest, idempotencyKey, _callback);
        }

        private UpdateVendorRequest buildBodyParams() {
            UpdateVendorRequest updateVendorRequest = new UpdateVendorRequest();
            updateVendorRequest.companyName(this.companyName);
            updateVendorRequest.email(this.email);
            updateVendorRequest.phone(this.phone);
            updateVendorRequest.paymentAccounts(this.paymentAccounts);
            updateVendorRequest.beneficiaryName(this.beneficiaryName);
            return updateVendorRequest;
        }

        /**
         * Execute updateById request
         * @return VendorResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public VendorResponse execute() throws ApiException {
            UpdateVendorRequest updateVendorRequest = buildBodyParams();
            ApiResponse<VendorResponse> localVarResp = updateByIdWithHttpInfo(id, updateVendorRequest, idempotencyKey);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateById request with HTTP info returned
         * @return ApiResponse&lt;VendorResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VendorResponse> executeWithHttpInfo() throws ApiException {
            UpdateVendorRequest updateVendorRequest = buildBodyParams();
            return updateByIdWithHttpInfo(id, updateVendorRequest, idempotencyKey);
        }

        /**
         * Execute updateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> updateVendor 200 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VendorResponse> _callback) throws ApiException {
            UpdateVendorRequest updateVendorRequest = buildBodyParams();
            return updateByIdAsync(id, updateVendorRequest, idempotencyKey, _callback);
        }
    }

    /**
     * Update vendor
     *      Updates an existing vendor by ID. 
     * @param id  (required)
     * @param updateVendorRequest  (required)
     * @return UpdateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateVendor 200 response </td><td>  -  </td></tr>
     </table>
     */
    public UpdateByIdRequestBuilder updateById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateByIdRequestBuilder(id);
    }
}
