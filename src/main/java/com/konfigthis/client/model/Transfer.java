/*
 * Payments API
 *  The payments API allows you to initiate and manage payments and vendors from your Brex business accounts. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Money;
import com.konfigthis.client.model.PaymentType;
import com.konfigthis.client.model.TransferCancellationReason;
import com.konfigthis.client.model.TransferStatus;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Transfer
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Transfer {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_COUNTERPARTY = "counterparty";
  @SerializedName(SERIALIZED_NAME_COUNTERPARTY)
  private Object counterparty;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "payment_type";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Money amount;

  public static final String SERIALIZED_NAME_PROCESS_DATE = "process_date";
  @SerializedName(SERIALIZED_NAME_PROCESS_DATE)
  private LocalDate processDate;

  public static final String SERIALIZED_NAME_ORIGINATING_ACCOUNT = "originating_account";
  @SerializedName(SERIALIZED_NAME_ORIGINATING_ACCOUNT)
  private Object originatingAccount = null;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private TransferStatus status;

  public static final String SERIALIZED_NAME_CANCELLATION_REASON = "cancellation_reason";
  @SerializedName(SERIALIZED_NAME_CANCELLATION_REASON)
  private TransferCancellationReason cancellationReason;

  public static final String SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE = "estimated_delivery_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE)
  private LocalDate estimatedDeliveryDate;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creator_user_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXTERNAL_MEMO = "external_memo";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_MEMO)
  private String externalMemo;

  public Transfer() {
  }

  public Transfer description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the transfer
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the transfer")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Transfer id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique ID associated with the transfer
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique ID associated with the transfer")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Transfer counterparty(Object counterparty) {
    
    
    
    
    this.counterparty = counterparty;
    return this;
  }

   /**
   * Get counterparty
   * @return counterparty
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getCounterparty() {
    return counterparty;
  }


  public void setCounterparty(Object counterparty) {
    
    
    
    this.counterparty = counterparty;
  }


  public Transfer paymentType(PaymentType paymentType) {
    
    
    
    
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Get paymentType
   * @return paymentType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PaymentType getPaymentType() {
    return paymentType;
  }


  public void setPaymentType(PaymentType paymentType) {
    
    
    
    this.paymentType = paymentType;
  }


  public Transfer amount(Money amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Money getAmount() {
    return amount;
  }


  public void setAmount(Money amount) {
    
    
    
    this.amount = amount;
  }


  public Transfer processDate(LocalDate processDate) {
    
    
    
    
    this.processDate = processDate;
    return this;
  }

   /**
   * Transaction processing date
   * @return processDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transaction processing date")

  public LocalDate getProcessDate() {
    return processDate;
  }


  public void setProcessDate(LocalDate processDate) {
    
    
    
    this.processDate = processDate;
  }


  public Transfer originatingAccount(Object originatingAccount) {
    
    
    
    
    this.originatingAccount = originatingAccount;
    return this;
  }

   /**
   * Get originatingAccount
   * @return originatingAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Object getOriginatingAccount() {
    return originatingAccount;
  }


  public void setOriginatingAccount(Object originatingAccount) {
    
    
    
    this.originatingAccount = originatingAccount;
  }


  public Transfer status(TransferStatus status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TransferStatus getStatus() {
    return status;
  }


  public void setStatus(TransferStatus status) {
    
    
    
    this.status = status;
  }


  public Transfer cancellationReason(TransferCancellationReason cancellationReason) {
    
    
    
    
    this.cancellationReason = cancellationReason;
    return this;
  }

   /**
   * Get cancellationReason
   * @return cancellationReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TransferCancellationReason getCancellationReason() {
    return cancellationReason;
  }


  public void setCancellationReason(TransferCancellationReason cancellationReason) {
    
    
    
    this.cancellationReason = cancellationReason;
  }


  public Transfer estimatedDeliveryDate(LocalDate estimatedDeliveryDate) {
    
    
    
    
    this.estimatedDeliveryDate = estimatedDeliveryDate;
    return this;
  }

   /**
   * Estimated delivery date for transfer
   * @return estimatedDeliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Estimated delivery date for transfer")

  public LocalDate getEstimatedDeliveryDate() {
    return estimatedDeliveryDate;
  }


  public void setEstimatedDeliveryDate(LocalDate estimatedDeliveryDate) {
    
    
    
    this.estimatedDeliveryDate = estimatedDeliveryDate;
  }


  public Transfer creatorUserId(String creatorUserId) {
    
    
    
    
    this.creatorUserId = creatorUserId;
    return this;
  }

   /**
   * User ID of the transfer initiator
   * @return creatorUserId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User ID of the transfer initiator")

  public String getCreatorUserId() {
    return creatorUserId;
  }


  public void setCreatorUserId(String creatorUserId) {
    
    
    
    this.creatorUserId = creatorUserId;
  }


  public Transfer createdAt(LocalDate createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date of transfer creation
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of transfer creation")

  public LocalDate getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(LocalDate createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Transfer displayName(String displayName) {
    
    
    
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Human readable name for the transaction
   * @return displayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Human readable name for the transaction")

  public String getDisplayName() {
    return displayName;
  }


  public void setDisplayName(String displayName) {
    
    
    
    this.displayName = displayName;
  }


  public Transfer externalMemo(String externalMemo) {
    
    
    
    
    this.externalMemo = externalMemo;
    return this;
  }

   /**
   * External memo for the transfer. &#x60;Payment Instructions&#x60; for Wires and the &#x60;Entry Description&#x60; for ACH payments.  Must be at most 90 characters for &#x60;ACH&#x60; and &#x60;WIRE&#x60; transactions and at most 40 characters for &#x60;CHEQUES&#x60; 
   * @return externalMemo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "External memo for the transfer. `Payment Instructions` for Wires and the `Entry Description` for ACH payments.  Must be at most 90 characters for `ACH` and `WIRE` transactions and at most 40 characters for `CHEQUES` ")

  public String getExternalMemo() {
    return externalMemo;
  }


  public void setExternalMemo(String externalMemo) {
    
    
    
    this.externalMemo = externalMemo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Transfer instance itself
   */
  public Transfer putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transfer transfer = (Transfer) o;
    return Objects.equals(this.description, transfer.description) &&
        Objects.equals(this.id, transfer.id) &&
        Objects.equals(this.counterparty, transfer.counterparty) &&
        Objects.equals(this.paymentType, transfer.paymentType) &&
        Objects.equals(this.amount, transfer.amount) &&
        Objects.equals(this.processDate, transfer.processDate) &&
        Objects.equals(this.originatingAccount, transfer.originatingAccount) &&
        Objects.equals(this.status, transfer.status) &&
        Objects.equals(this.cancellationReason, transfer.cancellationReason) &&
        Objects.equals(this.estimatedDeliveryDate, transfer.estimatedDeliveryDate) &&
        Objects.equals(this.creatorUserId, transfer.creatorUserId) &&
        Objects.equals(this.createdAt, transfer.createdAt) &&
        Objects.equals(this.displayName, transfer.displayName) &&
        Objects.equals(this.externalMemo, transfer.externalMemo)&&
        Objects.equals(this.additionalProperties, transfer.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, counterparty, paymentType, amount, processDate, originatingAccount, status, cancellationReason, estimatedDeliveryDate, creatorUserId, createdAt, displayName, externalMemo, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transfer {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    counterparty: ").append(toIndentedString(counterparty)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    processDate: ").append(toIndentedString(processDate)).append("\n");
    sb.append("    originatingAccount: ").append(toIndentedString(originatingAccount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    cancellationReason: ").append(toIndentedString(cancellationReason)).append("\n");
    sb.append("    estimatedDeliveryDate: ").append(toIndentedString(estimatedDeliveryDate)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    externalMemo: ").append(toIndentedString(externalMemo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("counterparty");
    openapiFields.add("payment_type");
    openapiFields.add("amount");
    openapiFields.add("process_date");
    openapiFields.add("originating_account");
    openapiFields.add("status");
    openapiFields.add("cancellation_reason");
    openapiFields.add("estimated_delivery_date");
    openapiFields.add("creator_user_id");
    openapiFields.add("created_at");
    openapiFields.add("display_name");
    openapiFields.add("external_memo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("payment_type");
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("originating_account");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Transfer
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Transfer.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transfer is not found in the empty JSON string", Transfer.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transfer.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `counterparty`
      if (jsonObj.get("counterparty") != null && !jsonObj.get("counterparty").isJsonNull()) {
        Object.validateJsonObject(jsonObj.getAsJsonObject("counterparty"));
      }
      // validate the required field `amount`
      Money.validateJsonObject(jsonObj.getAsJsonObject("amount"));
      // validate the optional field `cancellation_reason`
      if (jsonObj.get("cancellation_reason") != null && !jsonObj.get("cancellation_reason").isJsonNull()) {
        TransferCancellationReason.validateJsonObject(jsonObj.getAsJsonObject("cancellation_reason"));
      }
      if (!jsonObj.get("creator_user_id").isJsonNull() && (jsonObj.get("creator_user_id") != null && !jsonObj.get("creator_user_id").isJsonNull()) && !jsonObj.get("creator_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_user_id").toString()));
      }
      if (!jsonObj.get("display_name").isJsonNull() && (jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if (!jsonObj.get("external_memo").isJsonNull() && (jsonObj.get("external_memo") != null && !jsonObj.get("external_memo").isJsonNull()) && !jsonObj.get("external_memo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_memo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_memo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transfer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transfer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transfer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transfer.class));

       return (TypeAdapter<T>) new TypeAdapter<Transfer>() {
           @Override
           public void write(JsonWriter out, Transfer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Transfer read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Transfer instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Transfer given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Transfer
  * @throws IOException if the JSON string is invalid with respect to Transfer
  */
  public static Transfer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transfer.class);
  }

 /**
  * Convert an instance of Transfer to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

