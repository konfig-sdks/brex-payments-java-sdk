/*
 * Payments API
 *  The payments API allows you to initiate and manage payments and vendors from your Brex business accounts. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &#x60;USER_CANCELLED&#x60;: The transfer was canceled. &#x60;INSUFFICIENT_FUNDS&#x60;: The transfer could not be sent due to insufficient funds. &#x60;APPROVAL_DENIED&#x60;: The transfer was not sent because it was denied. &#x60;BLOCKED_BY_POSITIVE_PAY&#x60;: The transfer was blocked because of the ACH debit settings. 
 */
@JsonAdapter(TransferCancellationReason.Adapter.class)public enum TransferCancellationReason {
  
  USER_CANCELLED("USER_CANCELLED"),
  
  INSUFFICIENT_FUNDS("INSUFFICIENT_FUNDS"),
  
  APPROVAL_DENIED("APPROVAL_DENIED"),
  
  BLOCKED_BY_POSITIVE_PAY("BLOCKED_BY_POSITIVE_PAY");

  private String value;

  TransferCancellationReason(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransferCancellationReason fromValue(String value) {
    for (TransferCancellationReason b : TransferCancellationReason.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransferCancellationReason> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransferCancellationReason enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransferCancellationReason read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransferCancellationReason.fromValue(value);
    }
  }
}

