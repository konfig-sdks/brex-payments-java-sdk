/*
 * Payments API
 *  The payments API allows you to initiate and manage payments and vendors from your Brex business accounts. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: developer-access@brex.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * &#x60;PROCESSING&#x60;: We have started to process the sending or receiving of this transaction. &#x60;SCHEDULED&#x60;: The transaction is scheduled to enter the &#x60;PROCESSING&#x60; status. &#x60;PENDING_APPROVAL&#x60;: The transaction requires approval before it can enter the &#x60;SCHEDULED&#x60; or &#x60;PROCESSING&#x60; status. &#x60;FAILED&#x60;: A grouping of multiple terminal states that prevented the transaction from completing. This includes a a user-cancellation, approval being denied, insufficient funds, failed verifications, etc. &#x60;PROCESSED&#x60;: The money movement has been fully completed, which could mean money sent has arrived. 
 */
@JsonAdapter(TransferStatus.Adapter.class)public enum TransferStatus {
  
  PROCESSING("PROCESSING"),
  
  SCHEDULED("SCHEDULED"),
  
  PENDING_APPROVAL("PENDING_APPROVAL"),
  
  FAILED("FAILED"),
  
  PROCESSED("PROCESSED");

  private String value;

  TransferStatus(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TransferStatus fromValue(String value) {
    for (TransferStatus b : TransferStatus.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TransferStatus> {
    @Override
    public void write(final JsonWriter jsonWriter, final TransferStatus enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TransferStatus read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TransferStatus.fromValue(value);
    }
  }
}

